class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        return self.checkBST(root, float('-inf'), float('inf'))

    def checkBST(self, node: Optional[TreeNode], min_val: float, max_val: float) -> bool:
        if node is None:
            return True
        
        if node.val <= min_val or node.val >= max_val:
            return False

        left_valid = self.checkBST(node.left, min_val, node.val)
        right_valid = self.checkBST(node.right, node.val, max_val)

        return left_valid and right_valid
